// Automatically generated by MockGen. DO NOT EDIT!
// Source: io.go

package mock_pickett

import (
	io "io"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of IOHelper interface
type MockIOHelper struct {
	ctrl     *gomock.Controller
	recorder *_MockIOHelperRecorder
}

// Recorder for MockIOHelper (not exported)
type _MockIOHelperRecorder struct {
	mock *MockIOHelper
}

func NewMockIOHelper(ctrl *gomock.Controller) *MockIOHelper {
	mock := &MockIOHelper{ctrl: ctrl}
	mock.recorder = &_MockIOHelperRecorder{mock}
	return mock
}

func (_m *MockIOHelper) EXPECT() *_MockIOHelperRecorder {
	return _m.recorder
}

func (_m *MockIOHelper) OpenDockerfileRelative(dir string) (io.Reader, error) {
	ret := _m.ctrl.Call(_m, "OpenDockerfileRelative", dir)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIOHelperRecorder) OpenDockerfileRelative(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OpenDockerfileRelative", arg0)
}

func (_m *MockIOHelper) DirectoryRelative(dir string) string {
	ret := _m.ctrl.Call(_m, "DirectoryRelative", dir)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockIOHelperRecorder) DirectoryRelative(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DirectoryRelative", arg0)
}

func (_m *MockIOHelper) Fatalf(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Fatalf", _s...)
}

func (_mr *_MockIOHelperRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fatalf", _s...)
}

func (_m *MockIOHelper) CheckFatal(_param0 error, _param1 string, _param2 ...interface{}) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "CheckFatal", _s...)
}

func (_mr *_MockIOHelperRecorder) CheckFatal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckFatal", _s...)
}
